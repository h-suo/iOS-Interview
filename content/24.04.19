# iOS 면접 질문 정리

## Q. Swift의 키-값 관찰(Key-Value Observing, KVO)과 프로퍼티 옵저버(Property Observer)의 차이점과 각각의 사용 시나리오는 무엇인가요?

🗣️ Swift의 KVO와 프로퍼티 옵저버는 모두 값의 변화를 관찰하는 데 사용됩니다. 하지만 구현과 사용 방식에 차이가 있습니다.

🗣️ KVO는 객체의 프로퍼티가 변경되면 다른 객체가 알 수 있도록 하는 Object-C 언어의 디자인 패턴으로 Swift에서는 NSObject를 상속한 클래스 객체에서만 사용할 수 있습니다.

주로 모델과 뷰 등 객체 간의 데이터 흐름을 관리하고자 할 때 사용됩니다.

🗣️ 프로퍼티 옵저버는 Swift에서 제공하는 속성의 값이 변경되면 정의된 코드를 실행하는 기능으로 클래스, 구조체, 또는 열거형의 속성에 직접 구현할 수 있습니다.

willSet과 didSet 키워드를 사용하여 속성에 값이 할당되기 전과 후에 실행할 코드를 정의할 수 있습니다.

주로 객체 내에서 데이터의 유효성 검사, 데이터의 변화를 추적하고 이에 따른 작업을 수행할 때 사용됩니다.

### Q. KVO를 사용할 때의 주의사항은 무엇인가요?

🗣️ KVO를 이용해 다른 객체를 관찰할 때, 관찰 대상 객체에 대한 강한 참조로 인한 메모리 누수가 발생할 수 있습니다.

따라서 관찰 대상 객체를 약한 참조하거나, 관찰이 끝난 객체는 removeObserver로 제거하는 등 메모리 누수를 주의해야 합니다.

### Q. 프로퍼티 옵저버를 통해 얻을 수 있는 이점과 한계는 무엇인가요?

🗣️ 프로퍼티 옵저버를 사용하면 속성 값의 변경을 관찰하여, 값의 변경에 대한 데이터 유효성 검사나 특정 동작을 수행할 수 있다는 이점이 있습니다.

하지만 프로퍼티 옵저버는 속성이라는 제한된 범위에서만 적용되며, 프로퍼티 옵저버를 과도하게 사용하거나 수행 동작이 복잡해질 경우 가독성이 감소하고 코드가 복잡해질 수 있다는 단점이 있습니다.
